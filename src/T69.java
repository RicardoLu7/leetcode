public class T69 {
    public int maxProfit(int[] prices) {
        // 边界情况处理：如果价格数组为空或只有1天，无法完成交易
        if(prices == null || prices.length <= 1){
            return 0;
        }

        int n = prices.length;  // 获取交易天数

        /**
         * 定义动态规划数组 dp[i][j]
         * i 表示第i天（0-indexed）
         * j 表示当天的状态：
         *   [0]: 持有股票状态
         *   [1]: 不持有股票且非冷冻期状态
         *   [2]: 冷冻期状态
         */
        int[][] dp = new int[n][3];

        // ========== 初始化第0天（第一天）的状态 ==========

        // 第0天持有股票：只能是第0天买入，利润为 -prices[0]
        dp[0][0] = -prices[0];

        // 第0天不持有股票且非冷冻期：第0天不进行任何操作，利润为0
        dp[0][1] = 0;

        // 第0天处于冷冻期：第0天不可能处于冷冻期（冷冻期是卖出后的第二天），利润为0
        dp[0][2] = 0;

        // ========== 从第1天开始进行状态转移 ==========
        for (int i = 1; i < n; i++) {

            /**
             * 状态1：今天持有股票
             * 可能的情况：
             * 1. 昨天就持有股票，今天继续持有：dp[i-1][0]
             * 2. 今天买入股票：昨天必须是非冷冻期状态 dp[i-1][1] - prices[i]
             * 注意：不能从冷冻期状态直接买入（因为冷冻期后一天不能买入）
             */
            dp[i][0] = Math.max(
                    dp[i - 1][0],                    // 情况1：继续持有
                    dp[i - 1][1] - prices[i]         // 情况2：今天买入
            );

            /**
             * 状态2：今天不持有股票且非冷冻期
             * 可能的情况：
             * 1. 昨天就不持有股票且非冷冻期，今天继续：dp[i-1][1]
             * 2. 昨天是冷冻期，今天冷冻期结束：dp[i-1][2]
             */
            dp[i][1] = Math.max(
                    dp[i - 1][1],                    // 情况1：继续不持有
                    dp[i - 1][2]                     // 情况2：冷冻期结束
            );

            /**
             * 状态3：今天处于冷冻期
             * 唯一情况：昨天卖出了股票（昨天必须持有股票）
             * 利润 = 昨天持有股票的利润 + 今天卖出的价格
             * 注意：冷冻期只持续一天，明天就可以买入
             */
            dp[i][2] = dp[i - 1][0] + prices[i]; // 昨天持有，今天卖出
        }

        /**
         * 最终结果：最后一天的最大利润
         * 不能是持有股票状态（因为持有股票没卖出不算实际利润）
         * 只能是不持有股票或冷冻期状态
         */
        return Math.max(
                dp[n - 1][1],  // 最后一天不持有股票
                dp[n - 1][2]   // 最后一天处于冷冻期
        );
    }
}
